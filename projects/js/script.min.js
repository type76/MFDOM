// global consts/settings
var increment = 0;
var slowdown = false;

var timerID;
var revcounter = 0;
var topspeed = 100;
var xSpeed = 0.1;
var fullheight = true;
var curves = [];
var xwd = 5;
var shipstill = true;
var go  = document.getElementById('go');
var roadmax = {x:20, y:40};
var collidableMeshList = [];
var bpoints = 0;
var gpoints = 0;
var xwall = 20;

// nipple
var options = {
  zone: document.getElementById('joy'),
  mode: 'static',
  restOpacity: 0.6,
  lockX: false,
  position: {
    left: '50%',
    bottom: '100px'
  }
};

var joy = nipplejs.create(options);


joy.on('move dir start', function (evt, data) {
if (revcounter<2) {pressingDown();}

// ring.material.opacity = 1;
if (data.force>0) {force = data.force; }
  if (data.direction){ 
    // console.log(ship.position.x)
if (data.direction.x=='right' && ship.position.x < roadmax.x) {
        ship.position.x=ship.position.x+xSpeed*(data.force*2)*(revcounter/400);
              if (!controls.enabled) { camera.position.x = ship.position.x;}
        if (ship.rotation.z<0.2) {
          ship.rotation.z = data.force/40;
          ship.rotation.y = -data.force/80*(revcounter/200);
        }
}// R

if (data.direction.x=='left' && ship.position.x > -roadmax.x) {
        ship.position.x=ship.position.x-xSpeed*(data.force*2)*(revcounter/400);
              if (!controls.enabled) { camera.position.x = ship.position.x;}
        if (ship.rotation.z> -0.2) {
          ship.rotation.z = -data.force/40;
          ship.rotation.y = data.force/80*(revcounter/200);
        }      
}// L

if (data.direction.y=='up') {
  if (ship.position.z> -roadmax.y) {
    ship.position.z=ship.position.z-xSpeed*(data.force*2)*(revcounter/200);    
    if (!controls.enabled) { camera.position.z = ship.position.z;}
    // mtrail.material.opacity = data.force/2*(revcounter/800);
        if (ship.rotation.x> -0.2) {
          ship.rotation.x = -data.force/100*(revcounter/200);
        }    
  } // pos.z
    
}// U

if (data.direction.y=='down') {
  if (ship.position.z< roadmax.y) {
      ship.position.z=ship.position.z+xSpeed*(data.force*2)*(revcounter/200);    
          if (!controls.enabled) { camera.position.z = ship.position.z;}
        if (ship.rotation.x< 0.2) {
          ship.rotation.x = data.force/100*(revcounter/200);
        } 
    }// pos.z
}// U

}// if direction
});// on start

joy.on('end', function (evt, data) {
ship.rotation.z = 0;
ship.rotation.y = 0;
ship.rotation.x = 0;
});// on end




    function pressingDown(e) {
      slowdown = false;
      stopwarp = false;
      timerID = cancelAnimationFrame(slowtimer);
      timerID = requestAnimationFrame(timer);
      if (e) {e.preventDefault();}
     }
 
    function notPressingDown(e) {
    slowdown = true;
    stopwarp = true; 
    timerID = cancelAnimationFrame(timerID);
    timerID = requestAnimationFrame(slowtimer);
    if (e) {e.preventDefault();}
    }
 

function slowtimer() {
        revcounter--; fasta.value = revcounter;
        if (revcounter<0.1) {revcounter=0; 
          cancelAnimationFrame(slowtimer); return;} else {
                    requestAnimationFrame(slowtimer);
          }
}



    function timer() { 
      if (revcounter < topspeed || slowdown == true) {
        timerID = requestAnimationFrame(timer);
        revcounter++; fasta.value = revcounter;
      }
    }

 

    //keyboard controls
    document.onkeydown = checkKey;
    function checkKey(e) {
      switch (e.keyCode) {
        case 32:
        // console.log('space');
 accbtn.classList.toggle('on');
  if (accbtn.classList != "on") {
notPressingDown(e);
  } else {
pressingDown(e);
    }

        break;
        case 37:
        // console.log('left');
        movLeft();
        break;
        case 38:
        // console.log('up');
        movForward();
        break;
        case 39:
        // console.log('right');
        movRight();
        break;
        case 40:
        // console.log('down');
        movBack()
        break;

      }
    }


// accelleration
var rearcam = document.getElementById("rearcam");
var topcam = document.getElementById("topcam");
var cockpit = document.getElementById("cockpit");
var fasta = document.getElementById("accelerate");

// Listener
rearcam.addEventListener("click", rearcamclick, false);
topcam.addEventListener("click", topcamclick, false);
cockpit.addEventListener("click", cockpitclick, false);

// accbtn.addEventListener("mousedown", pressingDown, false);
// accbtn.addEventListener("mouseup", notPressingDown, false);
// // accbtn.addEventListener("mouseleave", notPressingDown, false);
// accbtn.addEventListener("touchstart", pressingDown, false);
// accbtn.addEventListener("touchend", notPressingDown, false);


var scene, camera, renderer, directionalLight;
var mesh;
var increment = 0;
var slowdown = false;
var timerID;
var revcounter = 0;
var topspeed = 360;
var svgt = 0;

function init() {
  setup();
  elements();
  render();
}

function setup() {

  renderer = new THREE.WebGLRenderer( { alpha: true, antialias: true } );

  renderer.setPixelRatio = devicePixelRatio;
  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);

// THREE.JS
  scene = new THREE.Scene();
  clock=new THREE.Clock();
  clock.start();

  camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 1, 1000);
  camera.position.x = 0;
  camera.position.y = 10;
  camera.position.z = 70;

// controls = new THREE.OrbitControls(camera);
controls = new THREE.OrbitControls(camera, renderer.domElement);

controls.enableDamping = true;
controls.dampingFactor = 1.5;
controls.maxDistance = 200;
controls.minDistance = 40;
controls.enablePan = false;
controls.maxPolarAngle = Math.PI*0.49;
controls.maxAzimuthAngle = Math.PI * 0.3;
controls.minAzimuthAngle = -Math.PI * 0.3;
// controls.enabled = false;

ship = new THREE.Group();
ship.scale.set(1, 1, 1);
ship.position.set( 0, 6, 24 );
ship.name= 'mothership';
scene.add( ship );


// mothership
var loader = new THREE.BufferGeometryLoader();

loader.load(
  'models/simple.json',
  function ( geometry ) {
    var material = new THREE.MeshPhongMaterial( { 
          color: 0xffffff,
      specular:0xffffff,
      shininess: 50
      // reflectivity: 1.0
       } );


    mothership = new THREE.Mesh( geometry, material );
    mothership.name = "mothership"
    mothership.position.set(0,0.35, -0.2);
    ship.add( mothership );

},
  function ( xhr ) {
  },
  function ( xhr ) {
    console.log( 'An error happened' );
  }
  );// end load ship

var loader = new THREE.TextureLoader();
var grad = loader.load( 'wgrad.png', render );
// exhaust
var geometry = new THREE.CylinderBufferGeometry( 0.5, 0.5, 3, 4, 1, true );
trmaterial = new THREE.MeshBasicMaterial( { 
  color: 0xffffff, transparent : true, opacity : 0
  , map:grad
 } );
mtrail = new THREE.Mesh( geometry, trmaterial );
mtrail.name='trail';
mtrail.position.set(0,0,3/2)
mtrail.rotation.set(Math.PI/2,0,0)
ship.add( mtrail );

// trail
// var cgeometry = new THREE.PlaneBufferGeometry(7.2, 5, 1, 1);
// cmaterial = new THREE.MeshBasicMaterial( { 
//   color: 0xffffff, transparent : true, opacity : 0.5
//   , map:grad, side: THREE.DoubleSide
//  } );
  
// xtrail = new THREE.Mesh( cgeometry, cmaterial );
// xtrail.position.set(0,0.8,-0.5);
// xtrail.rotation.set(-Math.PI/2,0,Math.PI);
// ship.add( xtrail );

// ship cube

var bgeometry = new THREE.BoxGeometry( 2, 6, 2 );
var mmaterial = new THREE.MeshBasicMaterial( { 
  color: 0xffffff, 
  transparent : true, 
  opacity : 0.1,
  map:grad
   } );
cube = new THREE.Mesh( bgeometry, mmaterial );
cube.position.set(0,-3,-2);
ship.add( cube );

// camera pointer
ccube = new THREE.Group();
scene.add( ccube );

// lights
var directionalLight = new THREE.DirectionalLight( 0xffffff, 0.5 );
directionalLight.position.set( 0, -1, 10 );
directionalLight.intensity = 0.2;
directionalLight.name = 'dlight';
scene.add( directionalLight );

var pointLight = new THREE.PointLight( 0xffffff, 1, 50 );
pointLight.position.set( 0, 3, -2 );
ship.add( pointLight );

var light = new THREE.AmbientLight( 0xffffff , 0.2);
ship.add( light );



  window.addEventListener("resize", resize);
  resize();
} // init

function elements() {
  var geometry = new THREE.PlaneBufferGeometry(200, 200, 40, 40);

  textureLoader = new THREE.TextureLoader();


  var displaceBuffer = new Float32Array(geometry.attributes.position.count);
  for (var i = 0; i < displaceBuffer.length; i++) {
    displaceBuffer[i] = Math.random();
  }

  geometry.addAttribute('vDisplace', new THREE.BufferAttribute(displaceBuffer, 1));

  var customUniforms = THREE.UniformsUtils.merge([
  THREE.ShaderLib.lambert.uniforms,
  {
    time: { type: "f", value: 3.0 },
    cor: { type: "v3", value: new THREE.Vector3(0.0, 0.0, 1.0) } }]);


  var material = new THREE.ShaderMaterial({
    uniforms: customUniforms,
    vertexShader: document.getElementById("vertex-shader").textContent,
    fragmentShader: document.getElementById("fragment-shader").textContent,
    lights: true,
    wireframe: true
     });

  mesh = new THREE.Mesh(geometry, material);
  mesh.rotation.set(-Math.PI/2,0,0);
  scene.add(mesh);

//
var geometry = new THREE.PlaneBufferGeometry( roadmax.y, roadmax.x*4, 32 );
var material = new THREE.MeshBasicMaterial( {color: 0x000000, transparent : true, opacity : 0.1} );
road = new THREE.Mesh( geometry, material );
road.rotation.set(-Math.PI/2,0,0);
road.position.set(0,-0.1,0);
scene.add( road );


walls();
} //elements



function render() {
  increment += revcounter/500;
  speedonumber.innerHTML = Math.floor(revcounter/2);
  mesh.material.uniforms.time.value = increment/2;
  // trmaterial.opacity = Math.random()*0.0001+revcounter/3000;
  hudupdate();
  TWEEN.update();
  renderer.render(scene, camera);
  requestAnimationFrame(render);
  camera.lookAt(ccube.position)
      if (!controls.enabled) { 
            camera.position = ship.position;
       }
     if (!shipstill) {
        // cmaterial.opacity = 0.0001+revcounter/3000;  
      }

//hit
  for (var vertexIndex = 0; vertexIndex < cube.geometry.vertices.length; vertexIndex++)
  {   
    var directionVector = new THREE.Vector3( 0, -1, 0 );
    var ray = new THREE.Raycaster( ship.position, directionVector.normalize() );
    var collisionResults = ray.intersectObjects( collidableMeshList );
    if ( collisionResults.length > 0 && collidableMeshList.distance < directionVector.length() ) 
      console.log('hit');
    // console.log(collisionResults)
    hit(collisionResults)
  } 
 
}// render



function hudupdate() {
  if (revcounter<0.1) {
    shipstill=true;
    } else {
      shipstill=false;
      speedometer.style.height = revcounter/2+'px';
      mtrail.material.opacity = revcounter/800;
    }
    // if (revcounter>99.9) {
    //       accbtn.innerHTML = '|';
    // }
}


function resize() {
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
}



window.onload = init;



// movement

function movLeft() {
  if (ship.position.x > -20) {
// ship.position.x = ship.position.x-xSpeed*(revcounter/10);
var posx = ship.position.x-6*xSpeed*(revcounter/30);
new TWEEN.Tween( ship.position ).to( {x: posx, y: 6, z: ship.position.z}, 200 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();

        if (ship.rotation.z> -0.2) {
      ship.rotation.z = -revcounter/6000;
      resetrot();
          }  

  if (!controls.enabled) {
  new TWEEN.Tween( camera.position ).to( {x: posx, y: 6, z: ship.position.z}, 200 )
  .easing( TWEEN.Easing.Quadratic.EaseInOut)
  .start();
  }
  }// if

}

function movRight() {
  if (ship.position.x < 20) {
var posx = ship.position.x+6*xSpeed*(revcounter/30);
new TWEEN.Tween( ship.position ).to( {x: posx, y: 6, z: ship.position.z}, 200 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();

    if (ship.rotation.z<0.2) {
      ship.rotation.z = revcounter/6000;
      resetrot();
    }

      if (!controls.enabled) {
    new TWEEN.Tween( camera.position ).to( {x: posx, y: 6, z: ship.position.z}, 200 )
    .easing( TWEEN.Easing.Quadratic.EaseInOut)
    .start();
    }
    }// if

}

function movForward() {
  if (ship.position.z> 0) {
var posz = ship.position.z-8*xSpeed*(revcounter/30);
new TWEEN.Tween( ship.position ).to( {x: ship.position.x, y: 6, z: posz}, 200 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();
        if (ship.rotation.x> -0.2) {
          ship.rotation.x = -(revcounter/8000);
          resetrot();
        } 
      if (!controls.enabled) {
    new TWEEN.Tween( camera.position ).to( {x: ship.position.x, y: 6, z: posz}, 200 )
    .easing( TWEEN.Easing.Quadratic.EaseInOut)
    .start();
    }
    }// if

}


function movBack() {
  if (ship.position.z< 30) {
var posz = ship.position.z+8*xSpeed*(revcounter/30);
new TWEEN.Tween( ship.position ).to( {x: ship.position.x, y: 6, z: posz}, 200 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();

        if (ship.rotation.x< 0.2) {
          ship.rotation.x = (revcounter/8000);
          resetrot();
        } 

      if (!controls.enabled) {
    new TWEEN.Tween( camera.position ).to( {x: ship.position.x, y: 6, z: posz}, 200 )
    .easing( TWEEN.Easing.Quadratic.EaseInOut)
    .start();
    }
    }// if

}


function resetrot() {
      setTimeout(function() {
        ship.rotation.z = 0;
        ship.rotation.x = 0;
      }, 200);

}

function resetcam() {
new TWEEN.Tween( ccube.position ).to( {x: 0, y: 0, z: 0}, 500 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();
controls.enabled = true;
mothership.visible=true;
// xtrail.visible=true;
rearcam.classList=''; topcam.classList=''; cockpit.classList='';
}

function rearcamclick() {
new TWEEN.Tween( camera.position ).to( {x: 0, y: 10, z: 70}, 500 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();
resetcam();
rearcam.classList='on';
}

function topcamclick() {
new TWEEN.Tween( camera.position ).to( {x: 0, y: 200, z: 1}, 500 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();
resetcam();
topcam.classList='on';
}


function cockpitclick() {
new TWEEN.Tween( camera.position ).to( {x: ship.position.x, y: ship.position.y-0.2, z: ship.position.z-2}, 500 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.onComplete(function() {
mothership.visible=false;
// xtrail.visible=false;
})
.start();

new TWEEN.Tween( ccube.position ).to( {x: 0, y: 0, z: -300}, 500 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();

rearcam.classList=''; topcam.classList='';
cockpit.classList='on';
controls.enabled = false;

setTimeout(function() {
mothership.visible=false;
}, 400);


}

// button
function golink() {
shipstill=true;
 go.classList.toggle('on');
  if (go.classList != "on") { 
new TWEEN.Tween( mesh.scale ).to( {x: 1, y: 1, z: 1}, 800 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();
roadmax.x=20; roadmax.y=40;
new TWEEN.Tween( road.scale ).to( {x: 1, y: 1, z: 1}, 800 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();
xwall = 20;
  } else { 
      new TWEEN.Tween( mesh.scale ).to( {x: 1, y: 1, z: 0.1}, 800 )
      .easing( TWEEN.Easing.Quadratic.EaseInOut)
      .start();
      roadmax.x=100; roadmax.y=100;
new TWEEN.Tween( road.scale ).to( {x: 5, y: 2.5, z: 5}, 800 )
.easing( TWEEN.Easing.Quadratic.EaseInOut)
.start();
xwall = 100;
    }
}






function walls() {
  var wallGeometry = new THREE.CubeGeometry( 10, 4, 10 );

  var blue = new THREE.MeshBasicMaterial( {color: 0x0000ff} );
  var green = new THREE.MeshBasicMaterial( {color: 0x00ff00} );

  var wall = new THREE.Mesh(wallGeometry, blue);
  wall.position.set(-5, 0, -5);
  wall.name = 'blue';
  scene.add(wall);
  collidableMeshList.push(wall);

  
  var wall2 = new THREE.Mesh(wallGeometry, green);
  wall2.position.set(5, 0.001, -5);
  wall2.name = 'green';
  scene.add(wall2);
  collidableMeshList.push(wall2);
}



// HIT function
function hit (v) {
if ( v.length > 0) {
var num = Math.floor(Math.random()*xwall) + 1;
num *= Math.floor(Math.random()*2) == 1 ? 1 : -1;
var num2 = Math.floor(Math.random()*xwall) + 1;
num2 *= Math.floor(Math.random()*2) == 1 ? 1 : -1;
v[0].object.position.x = num;
v[0].object.position.z = num2;
v[0].object.scale.y = 10;
if (v[0].object.name == 'blue') {bpoints+=1; console.log('b:'+bpoints);}
if (v[0].object.name == 'green') {gpoints+=1; console.log('g:'+gpoints);}
setTimeout(function() {
v[0].object.scale.y = 1;
}, 100);
}//if
}// fn hit



function faster(ev) {
revcounter = ev;
speedometer.style.height = revcounter/2+'px';
speedonumber.innerHTML = revcounter/2;
}